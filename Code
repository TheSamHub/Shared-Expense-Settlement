
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class person_compare{
    public:
    bool operator()(pair<string,int>p1,pair<string,int>p2){
        return p1.second < p2.second;
    }
};
int main() {
   int nooftransactions,friends;
   cin>>nooftransactions>>friends;
   string x,y;
   int amount;
   map<string,int> net;
   while(nooftransactions--){
       cin>>x>>y>>amount;
     if(net.count(x)==0){
         net[x]=0;
     }
     if(net.count(y)==0){
         net[y]=0;
     }
     net[x]-=amount;
     net[y]+=amount;
   }
     //now iterate over the persons and add those persons in the multiset who have a non zero net amount;
    multiset<pair<string,int>,person_compare> m;
     for(auto p:net){
         string person =p.first;
         int amount =p.second;
         //usually multiset compares on the basis of the first object
         //otherwise you need to make the custom comparator multiset<pair<string,int>,person_compare> m;
         if(net[person]!=0){
             m.insert(make_pair(person,amount));
         }
     }
     //settlements
     int count=0;
     while(!m.empty()){
         auto low=m.begin();
         auto high=prev(m.end());
         int debit=low->second;
         string debit_person=low->first;
         int credit=high->second;
         string credit_person=high->first;
            //pop them out
        m.erase(low);
        m.erase(high);
        int settled_amount=min(-debit,credit);
        debit+=settled_amount;
        credit-=settled_amount;
        cout<<debit_person<<" will pay "<<settled_amount<<" to "<<credit_person<<endl;
        if(!debit==0){
            m.insert(make_pair(debit_person,debit));
        }
        if(!credit==0){
            m.insert(make_pair(credit_person,credit));
        }
        count++;
     }
     cout<<count<<endl;
     return 0;
}
